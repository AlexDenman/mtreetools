function [arg] = get_validator(node)
%%
arguments (Input)
	node	mtree	{mtreetools.mustBeNodeKind(node,["DOT","ID","LP"])}
end
arguments (Output)
	arg (1,1)	struct
end

%%

val = struct(...
	func = string(missing), ...
	inputs = cell(1,0), ...
	str = string(node.tree2str) ...
	);

if all(ismember(node.kinds,["DOT","FIELD","ID"])) % just a function name
	val.validator = val.str;
	return
end


val.validator = string(node.L.tree2str);

input = node.R;

num_val_inputs = mtreetools.pathlength(input,"X",includefirst=1);
val.inputs = cell(1,num_val_inputs);

for ii = 1:num_val_inputs
	input_node_kinds = string(input.Tree.kinds);
	input_node_vals = string(input.Tree.stringvals);
	isvalue = ismember(input_node_kinds,...
		["ID","STRING","INT","DOUBLE","CHARVECTOR"]);
	val.inputs{ii} = reshape(input_node_vals(isvalue),1,[]);
	if all(ismember(input_node_kinds,["LB","ROW","CHARVECTOR"]))
		val.inputs{ii} = char(strjoin(val.inputs{ii},''));
	else any(ismember(input_node_kinds,["INT","DOUBLE"]))
		val.inputs{ii} = double(val.inputs{ii});
	end
end
%%
end